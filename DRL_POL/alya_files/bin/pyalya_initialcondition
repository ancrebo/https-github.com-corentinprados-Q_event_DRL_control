#!/usr/bin/env python
#
# Create initial condition for an ALYA case
from __future__ import print_function, division

import os, argparse, numpy as np
import pyAlya


## Argparse
argpar = argparse.ArgumentParser(prog='pyalya_initialconditon', description='Initial condition generator')
argpar.add_argument('--vx',type=str,help='expression to be evaluated at every point for x velocity',dest='fun_vx')
argpar.add_argument('--vy',type=str,help='expression to be evaluated at every point for x velocity',dest='fun_vy')
argpar.add_argument('--vz',type=str,help='expression to be evaluated at every point for x velocity',dest='fun_vz')
argpar.add_argument('casename',type=str,help='Name of the case')

# Parse inputs
args = argpar.parse_args()
if not args.fun_vx: args.fun_vx = '0'
if not args.fun_vy: args.fun_vy = '0'
if not args.fun_vz: args.fun_vz = '0'


## Initial field for VELOC
coordfile = pyAlya.io.MPIO_AUXFILE_S_FMT % (args.casename,'COORD')
header    = pyAlya.io.AlyaMPIO_header.read(coordfile)
# Read the node coordinates in serial
xyz,_ = pyAlya.io.AlyaMPIO_readByChunk_serial(coordfile,header.npoints,0)
# Generate the velocity array
vel = np.zeros((header.npoints,xyz.shape[1]),np.double) # Same dimensions as xyz
# Evaluate x velocity
vel[:,0] = eval(args.fun_vx)
vel[:,1] = eval(args.fun_vy)
if xyz.shape[1] > 2: vel[:,2] = eval(args.fun_vz)


## Store velocity as initial condition
outname = pyAlya.io.MPIO_XFLFILE_S_FMT % (args.casename,1,1)
h       = pyAlya.io.AlyaMPIO_header(
	fieldname   = 'XFIEL',
	dimension   = 'VECTO',
	association = 'NPOIN',
	dtype       = 'REAL',
	size        = '8BYTE',
	npoints     = header.npoints,
	nsub        = header.nsubd,
	sequence    = header.header['Sequence'],
	ndims       = 3,
	itime       = 0,
	time        = 0.,
	tag1        = 1,
	tag2        = 1,
	ignore_err  = True
)
pyAlya.io.AlyaMPIO_writeByChunk_serial(outname,vel,h,h.npoints,0)

pyAlya.cr_info()